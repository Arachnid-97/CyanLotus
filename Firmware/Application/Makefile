##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.10.0-B14] date: [Tue Nov 03 14:51:09 CST 2020] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#    2021-05-08 - Simplify the display + complete information
#    2017-02-10 - Several enhancements + project update mode
#    2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = Application

# Version info
VERSIONS ?= \"V0.0.1\"

# Memory size
MEM_SIZE ?= 192
FLASH_SIZE ?= 2048

# Offset Address
OFFSET_ADDR ?= 0x00000000

######################################
# building variables
######################################
# debug build?
DEBUG ?= 0

# optimization
# option O0/O1/O2/O3/Og/Os
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

# user path
SUBDIRS = App

Drivers_Src = Drivers/STM32F4xx_StdPeriph_Driver/src

USER_SRC = # $(wildcard $(SUBDIRS)/*.c)
USER_SRC += $(wildcard $(SUBDIRS)/MD5/*.c) \
# $(SUBDIRS)/OLED12864/oled12864_drv.c \
# $(SUBDIRS)/OLED12864/oled_extend.c \
# $(SUBDIRS)/AD9833/afg_wfg.c

MIDDLEWARE_SRC =  \
middleware/cJSON/cJSON.c \
$(wildcard middleware/FreeRTOS/FreeRTOS/Source/*.c) \
middleware/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c \
middleware/FreeRTOS/FreeRTOS/Source/portable/MemMang/heap_4.c \

# user includes
USER_INC =  \
-I$(SUBDIRS) \
-I$(SUBDIRS)/MD5 \
-I$(SUBDIRS)/Fatfs


MIDDLEWARE_INC =  \
-Imiddleware/cJSON \
-Imiddleware/FreeRTOS/FreeRTOS/Source/include \
-Imiddleware/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM4F \
-Imiddleware/ff14/source \


######################################
# source
######################################
# C sources
C_SOURCES =  \
syscalls.c \
Core/main.c \
Core/stm32f4xx_it.c \
Core/system_stm32f4xx.c \
$(Drivers_Src)/misc.c \
$(Drivers_Src)/stm32f4xx_rcc.c \
$(Drivers_Src)/stm32f4xx_gpio.c \
$(Drivers_Src)/stm32f4xx_usart.c \
Core/Src/bsp_uart.c \
Core/Src/bsp_clock.c \
Core/Src/bsp.c \
# $(Drivers_Src)/stm32f1xx_hal.c \
# $(Drivers_Src)/stm32f1xx_hal_rcc.c \
# $(Drivers_Src)/stm32f1xx_hal_rcc_ex.c \
# $(Drivers_Src)/stm32f1xx_hal_gpio.c \
# $(Drivers_Src)/stm32f1xx_hal_dma.c \
# $(Drivers_Src)/stm32f1xx_hal_cortex.c \
# $(Drivers_Src)/stm32f1xx_hal_pwr.c \
# $(Drivers_Src)/stm32f1xx_hal_flash.c \
# $(Drivers_Src)/stm32f1xx_hal_flash_ex.c \
# $(Drivers_Src)/stm32f1xx_hal_exti.c \
#Core/Src/usart.c \

C_SOURCES += $(USER_SRC)
C_SOURCES += $(MIDDLEWARE_SRC)

# ASM sources
ASM_SOURCES =  \
startup_stm32f429xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

 
#######################################
# AS/CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# NONE for Cortex-M0/M0+/M3
# fpu
FPU = -mfpu=fpv4-sp-d16
# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_STDPERIPH_DRIVER \
-DSTM32F429_439xx \
-DFREERTOS \
# -DDATA_IN_ExtSDRAM

C_DEFS += -DFIRMWARE_VERSIONS=$(VERSIONS)
C_DEFS += -DXBDDD=$(OFFSET_ADDR)

ifeq ($(DEBUG), 1)
C_DEFS += -DUSE_FULL_ASSERT
endif

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include \
-IDrivers/STM32F4xx_StdPeriph_Driver/inc \
-ICore \
-ICore/Inc

C_INCLUDES += $(USER_INC)
C_INCLUDES += $(MIDDLEWARE_INC)

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F429ZI_FLASH.ld

# newlib library
CLIBS = -specs=nano.specs
# floating point support
# CLIBS += -u _printf_float
# CLIBS += -u _scanf_float

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) $(CLIBS) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin sizes


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
	@echo compiling $(notdir $(<:.c=.c))...

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@$(AS) -c $(CFLAGS) $< -o $@
	@echo assembling $(notdir $(<:.s=.s))...

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@echo linking...
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		


#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

#######################################
# Memory usage
#######################################
sizes: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin
	@arr=(`$(PREFIX)size $(BUILD_DIR)/$(TARGET).elf | sed -n '2p'`); \
	let flash=($${arr[0]}+$${arr[1]}); \
	let mem=($${arr[1]}+$${arr[2]}); \
	let flash_size=$(subst K,,$(FLASH_SIZE))*1024; \
	let mem_size=$(subst K,,$(MEM_SIZE))*1024; \
	# flash_usage=`echo "scale=2;($$flash*100/$$flash_size)" | bc`; \
	# mem_usage=`echo "scale=2;($$mem*100/$$mem_size)" | bc`; \
	flash_usage1=`echo "scale=2; a=$$flash*100/$$flash_size; if (length(a)==scale(a)) print 0;print a" | bc`;\
	mem_usage1=`echo "scale=2; a=$$mem*100/$$mem_size; if (length(a)==scale(a)) print 0;print a " | bc`;\
	echo ""; \
	echo "-------------------------------------------------------------"; \
	echo "Flash: $$flash / $$flash_size bytes, $$flash_usage1% Full (.text + .data)"; \
	echo "SRAM:  $$mem / $$mem_size bytes, $$mem_usage1% Full (.data + .bss)"

mapinfo: 
	readelf -all $(BUILD_DIR)/$(TARGET).elf

# *** EOF ***
