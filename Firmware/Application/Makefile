##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.10.0-B14] date: [Tue Nov 03 14:51:09 CST 2020] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#    2022-02-07 - Improve the output script information
#    2021-07-28 - On-chip ITM debugging + python script output
#    2021-07-16 - Submodule detection + on-chip operation
#    2021-05-08 - Simplify the display + complete information
#    2017-02-10 - Several enhancements + project update mode
#    2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = Application

# Version info.
VERSIONS = \"V0.0.1\"

# System clock frequency.
SYSCLK = 168MHz

# High speed external clock frequency.
HSE_CLOCK = 16MHz

# Memory size.
MEM_SIZE_FLASH = 2048K
MEM_SIZE_RAM = 192K

MEM_SIZE_CCM = 64K

# Offset Address.
OFFSET_ADDRESS ?= 0x00000000

BASE_ADDRESS = 0x08000000

# Enable RTOS
USING_RTOS = 1

# Wrappers required to use newlib malloc-family within FreeRTOS.
USING_FREERTOS_HELPERS = 1

# GDB debug TCL server port.
TCL_PORT ?= 

# Parametric switch.
SYSCLK := $(subst MHz,000000,$(SYSCLK))
HSE_CLOCK := $(subst MHz,000000,$(HSE_CLOCK))

BASE_ADDRESS := $(shell echo $(BASE_ADDRESS) | tr a-z A-Z)
OFFSET_ADDRESS := $(shell echo $(OFFSET_ADDRESS) | tr a-z A-Z)


######################################
# building variables
######################################
# debug build?
DEBUG ?= 0

EXT_SDRAM ?= 0

# SRAM debug start.
ifneq ($(EXT_SDRAM), 1)
SRAM_START = 0
else
SRAM_START ?= 0
endif

# optimization:
# option O0/O1/O2/O3/Og/Os.
OPT = -O0


#######################################
# paths
#######################################
# Path to the base address.
PATHS_BASE ?= .

# Build path.
BUILD_DIR = $(PATHS_BASE)/build

# middleware path.
MIDDLEWARE_DIR = $(PATHS_BASE)/middleware

# user path.
SUBDIRS ?= $(PATHS_BASE)/App


#######################################
# Source file
#######################################
# user source.
USER_SRC = $(wildcard $(SUBDIRS)/*.c)
USER_SRC +=  \
$(SUBDIRS)/MD5/md5.c \
$(SUBDIRS)/SysGuard/sys_guard.c \
$(SUBDIRS)/Lwip/netconf.c \
$(SUBDIRS)/Lwip/port/sys_arch.c \
$(SUBDIRS)/Lwip/port/ethernetif/ethernetif.c \
$(SUBDIRS)/ETH/eth_socket.c \
$(SUBDIRS)/SerialPort/rs485.c \
$(SUBDIRS)/Modbus/mb_callback.c \
$(wildcard $(SUBDIRS)/Modbus/port/*.c) \
$(SUBDIRS)/SerialPort/virtual_serial.c \
$(SUBDIRS)/SDCard/sdcard_base.c \
$(SUBDIRS)/SDCard/stm324x9i_eval_sdio_sd.c \
$(SUBDIRS)/SDCard/user_sdcard.c \
$(SUBDIRS)/Fatfs/sd_diskio.c \
$(SUBDIRS)/Fatfs/user_fatfs.c \
$(wildcard $(SUBDIRS)/CANOpen/*.c) \
$(wildcard $(SUBDIRS)/MQTT/*.c) \
$(SUBDIRS)/W25Qxx/w25qxx.c \
$(SUBDIRS)/AT24Cxx/at24cxx.c \
$(SUBDIRS)/AT24Cxx/ee_simulate.c \
$(SUBDIRS)/W5500/w5500.c \
$(SUBDIRS)/W5500/w5500_drv.c \
$(SUBDIRS)/W5500/w5500_mode.c \
$(SUBDIRS)/IMU/mpu6050.c \
$(SUBDIRS)/ETH/client_socket.c \
$(SUBDIRS)/ETH/server_socket.c \
$(SUBDIRS)/ETH/udp_socket.c

# middleware source.
ifeq ($(USING_RTOS), 1)
MIDDLEWARE_SRC += $(wildcard $(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/*.c)
ifeq ($(USING_FREERTOS_HELPERS), 0)
MIDDLEWARE_SRC +=  \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c \
$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/MemMang/heap_4.c
else
# Wrappers required to use newlib malloc-family within FreeRTOS.
MIDDLEWARE_SRC +=  \
$(MIDDLEWARE_DIR)/FreeRTOS_Helpers/heap_useNewlib_ST.c \
$(MIDDLEWARE_DIR)/FreeRTOS_Helpers/port_DRN.c
endif
endif

MIDDLEWARE_SRC +=  \
$(wildcard $(MIDDLEWARE_DIR)/lwip-2.0.3/src/api/*.c) \
$(wildcard $(MIDDLEWARE_DIR)/lwip-2.0.3/src/core/*.c) \
$(wildcard $(MIDDLEWARE_DIR)/lwip-2.0.3/src/core/ipv4/*.c) \
$(MIDDLEWARE_DIR)/lwip-2.0.3/src/netif/ethernet.c \
$(MIDDLEWARE_DIR)/lwip-2.0.3/src/netif/lowpan6.c

MIDDLEWARE_SRC += $(MIDDLEWARE_DIR)/cJSON/cJSON.c

MIDDLEWARE_SRC +=  \
$(MIDDLEWARE_DIR)/freemodbus/modbus/mb.c \
$(wildcard $(MIDDLEWARE_DIR)/freemodbus/modbus/functions/*.c) \
$(MIDDLEWARE_DIR)/freemodbus/modbus/rtu/mbcrc.c \
$(MIDDLEWARE_DIR)/freemodbus/modbus/rtu/mbrtu.c

MIDDLEWARE_SRC += $(wildcard $(MIDDLEWARE_DIR)/ff14/source/*.c)

MIDDLEWARE_SRC +=  \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/dcf.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/emcy.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/lifegrd.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/lss.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/nmtMaster.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/nmtSlave.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/objacces.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/pdo.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/sdo.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/states.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/sync.c \
$(MIDDLEWARE_DIR)/CanFestival-3-10/src/timer.c

MIDDLEWARE_SRC += $(wildcard $(MIDDLEWARE_DIR)/paho.mqtt.embedded-c/MQTTPacket/src/*.c)

#######################################
# Include path
#######################################
# user includes.
USER_INC =  \
-I$(SUBDIRS) \
-I$(SUBDIRS)/MD5 \
-I$(SUBDIRS)/SysGuard \
-I$(SUBDIRS)/Fatfs \
-I$(SUBDIRS)/Lwip \
-I$(SUBDIRS)/Lwip/port \
-I$(SUBDIRS)/Lwip/port/arch \
-I$(SUBDIRS)/Lwip/port/ethernetif \
-I$(SUBDIRS)/ETH \
-I$(SUBDIRS)/SerialPort/ \
-I$(SUBDIRS)/Modbus/port \
-I$(SUBDIRS)/SDCard \
-I$(SUBDIRS)/Fatfs \
-I$(SUBDIRS)/CANOpen \
-I$(SUBDIRS)/MQTT \
-I$(SUBDIRS)/USB \
-I$(SUBDIRS)/W25Qxx \
-I$(SUBDIRS)/AT24Cxx \
-I$(SUBDIRS)/W5500 \
-I$(SUBDIRS)/IMU

# middleware includes.
MIDDLEWARE_INC +=  \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/include \
-I$(MIDDLEWARE_DIR)/FreeRTOS/FreeRTOS/Source/portable/GCC/ARM_CM4F

MIDDLEWARE_INC +=  \
-I$(MIDDLEWARE_DIR)/lwip-2.0.3/src/include \
-I$(MIDDLEWARE_DIR)/lwip-2.0.3/src/include/lwip \
-I$(MIDDLEWARE_DIR)/lwip-2.0.3/src/include/netif

MIDDLEWARE_INC += -I$(MIDDLEWARE_DIR)/cJSON

MIDDLEWARE_INC +=  \
-I$(MIDDLEWARE_DIR)/freemodbus/modbus/include \
-I$(MIDDLEWARE_DIR)/freemodbus/modbus/rtu

MIDDLEWARE_INC += -I$(MIDDLEWARE_DIR)/ff14/source

MIDDLEWARE_INC += -I$(MIDDLEWARE_DIR)/CanFestival-3-10/include

MIDDLEWARE_INC += -I$(MIDDLEWARE_DIR)/paho.mqtt.embedded-c/MQTTPacket/src

######################################
# source
######################################
Drivers_Src = Drivers/STM32F4xx_StdPeriph_Driver/src

# C sources.
C_SOURCES =  \
$(PATHS_BASE)/syscalls.c \
$(PATHS_BASE)/Core/main.c \
$(PATHS_BASE)/Core/stm32f4xx_it.c \
$(PATHS_BASE)/Core/system_stm32f4xx.c \
$(PATHS_BASE)/Core/Src/bsp_uart.c \
$(PATHS_BASE)/Core/Src/bsp_clock.c \
$(PATHS_BASE)/Core/Src/bsp.c \
$(PATHS_BASE)/Core/Src/stm32f4x7_eth_bsp.c \
$(PATHS_BASE)/Core/Src/bsp_can.c \
$(PATHS_BASE)/Core/Src/bsp_sdram.c \
$(PATHS_BASE)/Core/Src/bsp_spi.c \
$(PATHS_BASE)/Core/Src/bsp_iic.c

# Driver library.
C_SOURCES +=  \
$(PATHS_BASE)/$(Drivers_Src)/misc.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_rcc.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_gpio.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_usart.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_syscfg.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_tim.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_dma.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_exti.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_sdio.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_can.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_fmc.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_spi.c \
$(PATHS_BASE)/$(Drivers_Src)/stm32f4xx_i2c.c

# ETH library.
C_SOURCES +=  \
$(PATHS_BASE)/Drivers/STM32F4x7_ETH_Driver/src/stm32f4x7_eth.c

# USB library.
USB_HOST_EN ?= 0
USB_DEVICE_EN ?= 0
# USB OTG library.
ifneq ($(USB_HOST_EN)_$(USB_DEVICE_EN), 0_0)
C_SOURCES +=  \
$(PATHS_BASE)/Drivers/STM32_USB_OTG_Driver/src/usb_core.c
endif
# Device.
ifeq ($(USB_DEVICE_EN), 1)
C_SOURCES +=  \
$(PATHS_BASE)/Drivers/STM32_USB_OTG_Driver/src/usb_dcd_int.c \
$(PATHS_BASE)/Drivers/STM32_USB_OTG_Driver/src/usb_dcd.c
endif
# Host.
ifeq ($(USB_HOST_EN), 1)
C_SOURCES +=  \
$(PATHS_BASE)/Drivers/STM32_USB_OTG_Driver/src/usb_hcd_int.c \
$(PATHS_BASE)/Drivers/STM32_USB_OTG_Driver/src/usb_hcd.c
endif

# USB Device library.
ifeq ($(USB_DEVICE_EN), 1)
C_SOURCES +=  \
$(wildcard $(PATHS_BASE)/Drivers/STM32_USB_Device_Library/Core/src/*.c) \
$(PATHS_BASE)/Drivers/STM32_USB_Device_Library/Class/msc/src/usbd_msc_bot.c \
$(PATHS_BASE)/Drivers/STM32_USB_Device_Library/Class/msc/src/usbd_msc_core.c \
$(PATHS_BASE)/Drivers/STM32_USB_Device_Library/Class/msc/src/usbd_msc_data.c \
$(PATHS_BASE)/Drivers/STM32_USB_Device_Library/Class/msc/src/usbd_msc_scsi.c
endif
# USB Host library.
ifeq ($(USB_HOST_EN), 1)
C_SOURCES +=  \
$(wildcard $(PATHS_BASE)/Drivers/STM32_USB_HOST_Library/Core/src/*.c) \
$(wildcard $(PATHS_BASE)/Drivers/STM32_USB_HOST_Library/Class/MSC/src/*.c)
endif

C_SOURCES += $(USER_SRC)
C_SOURCES += $(MIDDLEWARE_SRC)

# ASM sources.
ASM_SOURCES =  \
$(PATHS_BASE)/startup_stm32f429xx.s


#######################################
# Tools
#######################################
# openocd.
OPENOCD           ?= openocd
OPENOCD_INTERFACE ?= interface/stlink.cfg
OPENOCD_CMDS      ?=
OPENOCD_TARGET    ?= target/stm32f4x.cfg

# python.
PYTHON            ?= python3

# bc calculator.
BC                ?= bc

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
DP = $(GCC_PATH)/$(PREFIX)objdump
GDB = $(GCC_PATH)/$(PREFIX)gdb
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
DP = $(PREFIX)objdump
GDB = $(PREFIX)gdb
endif
ASM = $(DP) -D
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

 
#######################################
# AS/CFLAGS
#######################################
# cpu.
CPU = -mcpu=cortex-m4

# NONE for Cortex-M0/M0+/M3.
# fpu.
FPU = -mfpu=fpv4-sp-d16
# float-abi.
FLOAT-ABI = -mfloat-abi=hard

# mcu.
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc.
# AS defines.
AS_DEFS = 

# C defines.
C_DEFS =  \
-DUSE_STDPERIPH_DRIVER \
-DSTM32F429_439xx \

C_DEFS += -DFIRMWARE_VERSIONS=$(VERSIONS)
C_DEFS += -DXBDDD=$(OFFSET_ADDRESS)
C_DEFS += -DSYS_CLK=$(SYSCLK)
C_DEFS += -DHSE_VALUE=$(HSE_CLOCK)

ifeq ($(USING_RTOS), 1)
C_DEFS += -DUSING_RTOS
endif

ifeq ($(DEBUG), 1)
C_DEFS += -DUSE_FULL_ASSERT
C_DEFS += -DUSING_DEBUG
endif

ifeq ($(EXT_SDRAM), 1)
C_DEFS += -DDATA_IN_ExtSDRAM
else
ifeq ($(SRAM_START), 1)
C_DEFS += -DVECT_TAB_SRAM
endif
endif

# C_DEFS += -DUSE_USB_OTG_FS

# AS includes.
AS_INCLUDES = 

# C includes.
C_INCLUDES =  \
-I$(PATHS_BASE)/Drivers/CMSIS/Device/ST/STM32F4xx/Include \
-I$(PATHS_BASE)/Drivers/CMSIS/Include \
-I$(PATHS_BASE)/Drivers/STM32F4xx_StdPeriph_Driver/inc \
-I$(PATHS_BASE)/Core \
-I$(PATHS_BASE)/Core/Inc \
-I$(PATHS_BASE)/Drivers/STM32F4x7_ETH_Driver/inc \
-I$(PATHS_BASE)/Drivers/STM32_USB_OTG_Driver/inc \
-I$(PATHS_BASE)/Drivers/STM32_USB_Device_Library/Core/inc \
-I$(PATHS_BASE)/Drivers/STM32_USB_Device_Library/Class/msc/inc \
-I$(PATHS_BASE)/Drivers/STM32_USB_HOST_Library/Core/inc \
-I$(PATHS_BASE)/Drivers/STM32_USB_HOST_Library/Class/MSC/inc

C_INCLUDES += $(USER_INC)
C_INCLUDES += $(MIDDLEWARE_INC)

# compile gcc flags.
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2

# Prevent silent errors when converting between types (requires explicit casting).
# CFLAGS += -Wconversion

VERSIONS := \"V9.9.9\"
endif

# Generate dependency information.
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

# Compile the standard.
CFLAGS += -std=gnu11

# Static Stack Usage Analysis.
CFLAGS += -fstack-usage

# CFLAGS += -Wstack-usage=128

# This avoids getting a potentially unaligned pointer.
CFLAGS += -Wno-address-of-packed-member

#######################################
# LDFLAGS
#######################################
# link script.
ifeq ($(EXT_SDRAM), 1)
LDSCRIPT = $(PATHS_BASE)/stm32f4xx_flash_extsdram.ld
else
ifeq ($(SRAM_START), 1)
LDSCRIPT = $(PATHS_BASE)/STM32F429ZI_SDRAM.ld
else
LDSCRIPT =  \
$(PATHS_BASE)/STM32F429ZI_FLASH.ld
endif
endif

# newlib library.
CLIBS = -specs=nano.specs
# floating point support.
CLIBS += -u _printf_float
# CLIBS += -u _scanf_float

# libraries.
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) $(CLIBS) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).asm $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin sizes

# Special for emulator debugging
debugging: $(BUILD_DIR)/$(TARGET).asm sizes


#######################################
# build the application
#######################################
# list of objects.
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects.
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
	@echo compiling $<...
#@echo compiling $(notdir $<)...

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@$(AS) -c $(CFLAGS) $< -o $@
	@echo assembling $<...
#@echo assembling $(notdir $<)...

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@echo linking...
	$(SZ) $@

$(BUILD_DIR)/%.asm: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(ASM) $< > $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir -p $@


# This define n-thing is a standard hack to get newlines in GNU Make.
define n


endef

# Make sure that the submodules are up to date.
# Check if there are submodules files in the middleware directories, if not warn the user.
ifeq ($(wildcard $(MIDDLEWARE_DIR)/FreeRTOS/*),)
  $(error $n                                                                   \
    The submodules does not seem to be present, consider fetching them by:$n   \
      $$ git submodule init$n                                                  \
      $$ git submodule update$n                                                \
  )
endif


#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

#######################################
# Memory usage
#######################################
sizes: $(BUILD_DIR)/$(TARGET).elf
	@arr=(`$(SZ) $< | sed -n '2p'`); \
	let flash=($${arr[0]}+$${arr[1]}); \
	let mem=($${arr[1]}+$${arr[2]}); \
	let flash_size=$(subst K,,$(MEM_SIZE_FLASH))*1024; \
	let mem_size=$(subst K,,$(MEM_SIZE_RAM))*1024; \
	# flash_usage=`echo "scale=2;($$flash*100/$$flash_size)" | bc`; \
	# mem_usage=`echo "scale=2;($$mem*100/$$mem_size)" | bc`; \
	flash_usage=`echo "scale=2; a=$$flash*100/$$flash_size; if (length(a)==scale(a)) print 0;print a" | $(BC)`;\
	mem_usage=`echo "scale=2; a=$$mem*100/$$mem_size; if (length(a)==scale(a)) print 0;print a " | $(BC)`;\
	echo ""; \
	echo "-------------------------------------------------------------"; \
	if [ $$flash -ge $$flash_size ]; then \
		echo -e "Flash: \033[1;31m$$flash \033[0m/ $$flash_size bytes, $$flash_usage% Full (.text + .data)"; \
	else \
		echo "Flash: $$flash / $$flash_size bytes, $$flash_usage% Full (.text + .data)"; \
	fi; \
	if [ $$mem -ge $$mem_size ]; then \
		echo -e "SRAM:  \033[1;31m$$mem \033[0m/ $$mem_size bytes, $$mem_usage% Full (.data + .bss)"; \
	else \
		echo "SRAM:  $$mem / $$mem_size bytes, $$mem_usage% Full (.data + .bss)"; \
	fi;

mapinfo: 
	@if [ -f "$(BUILD_DIR)/$(TARGET).elf" ]; then \
		readelf -all $(BUILD_DIR)/$(TARGET).elf; \
	else \
		echo -e "\033[1;33mwarning:\033[0m No such file of $(BUILD_DIR)/$(TARGET).elf"; \
		echo ""; \
		echo ">> Please 'make -j8' build the project file <<"; \
		exit $$?; \
	fi;

reset:
	$(OPENOCD) -d0 -f $(OPENOCD_INTERFACE) $(OPENOCD_CMDS) -f $(OPENOCD_TARGET) -c init -c targets \
	-c 'reset run' -c shutdown

install: $(BUILD_DIR)/$(TARGET).bin
	@base_addr=$(subst 0X,,$(BASE_ADDRESS)); \
	offset_addr=$(subst 0X,,$(OFFSET_ADDRESS)); \
	load_addr=`echo "obase=10;ibase=16;$$base_addr+$$offset_addr" | bc`; \
	$(OPENOCD) -d2 -f $(OPENOCD_INTERFACE) $(OPENOCD_CMDS) -f $(OPENOCD_TARGET) -c init -c targets \
				-c "reset halt"	-c "flash write_image erase $(BUILD_DIR)/$(TARGET).bin $$load_addr bin" \
				-c "verify_image $(BUILD_DIR)/$(TARGET).bin $$load_addr bin" -c "reset run" -c shutdown

openocd:
	$(OPENOCD) -d2 -f $(OPENOCD_INTERFACE) $(OPENOCD_CMDS) -f $(OPENOCD_TARGET) -c init -c targets -c "\$$_TARGETNAME configure -rtos auto"

itm:
	$(PYTHON) tools/SWO-Parser/swo_parser.py $(SYSCLK) $(TCL_PORT)

gdb:
	$(GDB) -ex "target remote localhost:3333" -ex "monitor reset halt" $(BUILD_DIR)/$(TARGET).elf

.PHONY: sizes all clean build mapinfo reset install openocd itm gdb


# *** EOF ***
